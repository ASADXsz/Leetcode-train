class Solution {
public:
    int minDistance(string s, string t) {
        int n = s.length(), m = t.length();
        
        // 使用滚动数组优化空间，只需要两行来保存前一行和当前行的结果
        vector<vector<int>> dp(2, vector<int>(m + 1));
 
        // 初始化第一行，表示从空字符串变为 t 的前 j 个字符的编辑距离
        for (int j = 0; j <= m; ++j) 
            dp[0][j] = j;
 
        // 逐步计算 dp 值
        for (int i = 0; i < n; ++i) {
            // 初始化当前行的第一个元素，表示从 s 的前 i+1 个字符变为空字符串的编辑距离
            dp[(i + 1) % 2][0] = i + 1;
 
            // 遍历 t 的每个字符
            for (int j = 0; j < m; ++j) {
                // 如果当前字符相同，不需要额外操作
                if (s[i] == t[j]) {
                    dp[(i + 1) % 2][j + 1] = dp[i % 2][j];
                } else {
                    // 如果当前字符不同，取插入、删除和替换操作中的最小值并加1
                    dp[(i + 1) % 2][j + 1] = min({dp[i % 2][j + 1], dp[(i + 1) % 2][j], dp[i % 2][j]}) + 1;
                }
            }
        }
 
        return dp[n % 2][m];
    }
};
 
